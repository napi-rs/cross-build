name: Pure Rust project build on Linux
on:
  push:
    branches:
      - main
  pull_request:

env:
  DEBUG: 'napi:*'
  MACOSX_DEPLOYMENT_TARGET: '10.13'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: x86_64-apple-darwin
            flags: '-x'
          - target: aarch64-apple-darwin
            flags: '-x'
          - target: x86_64-pc-windows-msvc
            flags: '-x'
          - target: i686-pc-windows-msvc
            flags: '-x'
          - target: aarch64-pc-windows-msvc
            flags: '-x'
          - target: x86_64-unknown-linux-gnu
            flags: '--use-napi-cross'
          - target: aarch64-unknown-linux-gnu
            flags: '--use-napi-cross'
          - target: x86_64-unknown-linux-musl
            flags: '-x'
          - target: aarch64-unknown-linux-musl
            flags: '-x'
          - target: armv7-unknown-linux-gnueabihf
            flags: '--use-napi-cross'
          - target: powerpc64le-unknown-linux-gnu
            flags: '--use-napi-cross'
          - target: s390x-unknown-linux-gnu
            flags: '--use-napi-cross'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            ${{ github.workspace }}/.xwin
            ~/.napi-rs
            ./target
          key: ${{ matrix.settings.target }}-cargo-cache
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - uses: actions/setup-node@v5
        with:
          node-version: '22'
          cache: 'yarn'
      - name: Install ziglang
        uses: mlugg/setup-zig@v2
        with:
          version: 0.14.1
      - name: Install cargo toolchains
        uses: taiki-e/install-action@v2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild,cargo-xwin
      - run: yarn install
      - run: yarn workspace @napi-cross-build/01-pure-rust build --target ${{ matrix.settings.target }} ${{ matrix.settings.flags }}
        env:
          XWIN_CACHE_DIR: ${{ github.workspace }}/.xwin
      - uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: 01-pure-rust/*.node
          if-no-files-found: error
  test-host:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: x86_64-apple-darwin
            host: macos-latest
            architecture: x64
          - target: aarch64-apple-darwin
            host: macos-latest
            architecture: arm64
          - target: x86_64-pc-windows-msvc
            host: windows-latest
            architecture: x64
          - target: aarch64-pc-windows-msvc
            host: windows-11-arm
            architecture: arm64
          - target: i686-pc-windows-msvc
            host: windows-latest
            architecture: x64
        node: ['20', '22']
    runs-on: ${{ matrix.settings.host }}
    needs:
      - build
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
          cache: 'yarn'
          architecture: ${{ matrix.settings.architecture }}
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v5
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 22
          cache: yarn
          architecture: x86
      - name: Download bindings
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.settings.target }}
          path: 01-pure-rust/
      - name: Run tests
        run: yarn workspace @napi-cross-build/01-pure-rust test
  test-docker:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - target: x86_64-unknown-linux-gnu
            docker: node:22-slim
            args: ''
          - target: aarch64-unknown-linux-gnu
            docker: node:22-slim
            args: '--platform linux/arm64'
          - target: x86_64-unknown-linux-musl
            docker: node:22-alpine
            args: ''
          - target: aarch64-unknown-linux-musl
            docker: node:22-alpine
            args: '--platform linux/arm64'
          - target: armv7-unknown-linux-gnueabihf
            docker: node:22-bullseye-slim
            args: '--platform linux/arm/v7'
          - target: s390x-unknown-linux-gnu
            docker: node:22-slim
            args: '--platform linux/s390x'
          - target: powerpc64le-unknown-linux-gnu
            docker: node:22-slim
            args: '--platform linux/ppc64le'
    runs-on: ${{ contains(matrix.settings.target, 'aarch64') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    needs:
      - build
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install
      - name: Download bindings
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.settings.target }}
          path: 01-pure-rust/
      - name: Set up QEMU
        if: ${{ !contains(matrix.settings.target, 'aarch64') }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,arm
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: ${{ !contains(matrix.settings.target, 'aarch64') }}
      - name: Run tests
        uses: addnab/docker-run-action@v3
        # Node.js on qemu randomly segfaults on powerpc64le
        continue-on-error: ${{ matrix.settings.target == 'powerpc64le-unknown-linux-gnu' }}
        with:
          image: ${{ matrix.settings.docker }}
          options: ${{ matrix.settings.args }} -v ${{ github.workspace }}:/build -w /build
          run: |
            set -e
            yarn workspace @napi-cross-build/01-pure-rust test
